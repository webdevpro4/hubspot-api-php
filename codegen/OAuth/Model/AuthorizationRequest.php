<?php
/**
 * AuthorizationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  HubSpot\Client\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OAuthService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\OAuth\Model;

use \ArrayAccess;
use \HubSpot\Client\OAuth\ObjectSerializer;

/**
 * AuthorizationRequest Class Doc Comment
 *
 * @category Class
 * @package  HubSpot\Client\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuthorizationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuthorizationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'response_type' => 'string',
        'client_id' => 'string',
        'redirect_uri' => 'string',
        'state' => 'string',
        'hub_id' => 'int',
        'recaptcha_token' => 'string',
        'scopes' => 'string[]',
        'optional_scopes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'response_type' => null,
        'client_id' => null,
        'redirect_uri' => null,
        'state' => null,
        'hub_id' => null,
        'recaptcha_token' => null,
        'scopes' => null,
        'optional_scopes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_type' => 'responseType',
        'client_id' => 'clientId',
        'redirect_uri' => 'redirectUri',
        'state' => 'state',
        'hub_id' => 'hubId',
        'recaptcha_token' => 'recaptchaToken',
        'scopes' => 'scopes',
        'optional_scopes' => 'optionalScopes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_type' => 'setResponseType',
        'client_id' => 'setClientId',
        'redirect_uri' => 'setRedirectUri',
        'state' => 'setState',
        'hub_id' => 'setHubId',
        'recaptcha_token' => 'setRecaptchaToken',
        'scopes' => 'setScopes',
        'optional_scopes' => 'setOptionalScopes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_type' => 'getResponseType',
        'client_id' => 'getClientId',
        'redirect_uri' => 'getRedirectUri',
        'state' => 'getState',
        'hub_id' => 'getHubId',
        'recaptcha_token' => 'getRecaptchaToken',
        'scopes' => 'getScopes',
        'optional_scopes' => 'getOptionalScopes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['response_type'] = isset($data['response_type']) ? $data['response_type'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['redirect_uri'] = isset($data['redirect_uri']) ? $data['redirect_uri'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['hub_id'] = isset($data['hub_id']) ? $data['hub_id'] : null;
        $this->container['recaptcha_token'] = isset($data['recaptcha_token']) ? $data['recaptcha_token'] : null;
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
        $this->container['optional_scopes'] = isset($data['optional_scopes']) ? $data['optional_scopes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scopes'] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if ($this->container['optional_scopes'] === null) {
            $invalidProperties[] = "'optional_scopes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_type
     *
     * @return string|null
     */
    public function getResponseType()
    {
        return $this->container['response_type'];
    }

    /**
     * Sets response_type
     *
     * @param string|null $response_type response_type
     *
     * @return $this
     */
    public function setResponseType($response_type)
    {
        $this->container['response_type'] = $response_type;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string|null
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string|null $redirect_uri redirect_uri
     *
     * @return $this
     */
    public function setRedirectUri($redirect_uri)
    {
        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets hub_id
     *
     * @return int|null
     */
    public function getHubId()
    {
        return $this->container['hub_id'];
    }

    /**
     * Sets hub_id
     *
     * @param int|null $hub_id hub_id
     *
     * @return $this
     */
    public function setHubId($hub_id)
    {
        $this->container['hub_id'] = $hub_id;

        return $this;
    }

    /**
     * Gets recaptcha_token
     *
     * @return string|null
     */
    public function getRecaptchaToken()
    {
        return $this->container['recaptcha_token'];
    }

    /**
     * Sets recaptcha_token
     *
     * @param string|null $recaptcha_token recaptcha_token
     *
     * @return $this
     */
    public function setRecaptchaToken($recaptcha_token)
    {
        $this->container['recaptcha_token'] = $recaptcha_token;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[] $scopes scopes
     *
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets optional_scopes
     *
     * @return string[]
     */
    public function getOptionalScopes()
    {
        return $this->container['optional_scopes'];
    }

    /**
     * Sets optional_scopes
     *
     * @param string[] $optional_scopes optional_scopes
     *
     * @return $this
     */
    public function setOptionalScopes($optional_scopes)
    {
        $this->container['optional_scopes'] = $optional_scopes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


