<?php
/**
 * Application
 *
 * PHP version 5
 *
 * @category Class
 * @package  HubSpot\Client\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OAuthService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\OAuth\Model;

use \ArrayAccess;
use \HubSpot\Client\OAuth\ObjectSerializer;

/**
 * Application Class Doc Comment
 *
 * @category Class
 * @package  HubSpot\Client\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Application implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Application';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'guid' => 'string',
        'owner_id' => 'int',
        'client_id' => 'string',
        'scopes' => 'string',
        'type' => 'int',
        'version' => 'string',
        'hub_id' => 'int',
        'installs' => 'int',
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'url_slug' => 'string',
        'callback_url' => 'string',
        'screenshot_url' => 'string',
        'banner_url' => 'string',
        'install_callback_url' => 'string',
        'uninstall_callback_url' => 'string',
        'stage' => 'string',
        'description' => 'string',
        'short_description' => 'string',
        'support_phone' => 'string',
        'support_email' => 'string',
        'support_url' => 'string',
        'help_url' => 'string',
        'single_color_icon_data' => 'string',
        'scope_group_ids' => 'int[]',
        'week_installs' => 'int',
        'author_email' => 'string',
        'author_name' => 'string',
        'secret' => 'string',
        'public_app' => 'bool',
        'is_featured' => 'bool',
        'deleted' => 'bool',
        'is_user_level' => 'bool',
        'off_platform' => 'bool',
        'id' => 'int',
        'name' => 'string',
        'icon_url' => 'string',
        'listing_icon_url' => 'string',
        'listing_wordmark_icon_url' => 'string',
        'single_color_icon_url' => 'string',
        'oauth_redirect_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'guid' => null,
        'owner_id' => null,
        'client_id' => null,
        'scopes' => null,
        'type' => null,
        'version' => null,
        'hub_id' => null,
        'installs' => null,
        'created' => 'date-time',
        'updated' => 'date-time',
        'url_slug' => null,
        'callback_url' => null,
        'screenshot_url' => null,
        'banner_url' => null,
        'install_callback_url' => null,
        'uninstall_callback_url' => null,
        'stage' => null,
        'description' => null,
        'short_description' => null,
        'support_phone' => null,
        'support_email' => null,
        'support_url' => null,
        'help_url' => null,
        'single_color_icon_data' => null,
        'scope_group_ids' => null,
        'week_installs' => null,
        'author_email' => null,
        'author_name' => null,
        'secret' => null,
        'public_app' => null,
        'is_featured' => null,
        'deleted' => null,
        'is_user_level' => null,
        'off_platform' => null,
        'id' => null,
        'name' => null,
        'icon_url' => null,
        'listing_icon_url' => null,
        'listing_wordmark_icon_url' => null,
        'single_color_icon_url' => null,
        'oauth_redirect_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'owner_id' => 'ownerId',
        'client_id' => 'clientId',
        'scopes' => 'scopes',
        'type' => 'type',
        'version' => 'version',
        'hub_id' => 'hubId',
        'installs' => 'installs',
        'created' => 'created',
        'updated' => 'updated',
        'url_slug' => 'urlSlug',
        'callback_url' => 'callbackUrl',
        'screenshot_url' => 'screenshotUrl',
        'banner_url' => 'bannerUrl',
        'install_callback_url' => 'installCallbackUrl',
        'uninstall_callback_url' => 'uninstallCallbackUrl',
        'stage' => 'stage',
        'description' => 'description',
        'short_description' => 'shortDescription',
        'support_phone' => 'supportPhone',
        'support_email' => 'supportEmail',
        'support_url' => 'supportUrl',
        'help_url' => 'helpUrl',
        'single_color_icon_data' => 'singleColorIconData',
        'scope_group_ids' => 'scopeGroupIds',
        'week_installs' => 'weekInstalls',
        'author_email' => 'authorEmail',
        'author_name' => 'authorName',
        'secret' => 'secret',
        'public_app' => 'publicApp',
        'is_featured' => 'isFeatured',
        'deleted' => 'deleted',
        'is_user_level' => 'isUserLevel',
        'off_platform' => 'offPlatform',
        'id' => 'id',
        'name' => 'name',
        'icon_url' => 'iconUrl',
        'listing_icon_url' => 'listingIconUrl',
        'listing_wordmark_icon_url' => 'listingWordmarkIconUrl',
        'single_color_icon_url' => 'singleColorIconUrl',
        'oauth_redirect_url' => 'oauthRedirectUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'owner_id' => 'setOwnerId',
        'client_id' => 'setClientId',
        'scopes' => 'setScopes',
        'type' => 'setType',
        'version' => 'setVersion',
        'hub_id' => 'setHubId',
        'installs' => 'setInstalls',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'url_slug' => 'setUrlSlug',
        'callback_url' => 'setCallbackUrl',
        'screenshot_url' => 'setScreenshotUrl',
        'banner_url' => 'setBannerUrl',
        'install_callback_url' => 'setInstallCallbackUrl',
        'uninstall_callback_url' => 'setUninstallCallbackUrl',
        'stage' => 'setStage',
        'description' => 'setDescription',
        'short_description' => 'setShortDescription',
        'support_phone' => 'setSupportPhone',
        'support_email' => 'setSupportEmail',
        'support_url' => 'setSupportUrl',
        'help_url' => 'setHelpUrl',
        'single_color_icon_data' => 'setSingleColorIconData',
        'scope_group_ids' => 'setScopeGroupIds',
        'week_installs' => 'setWeekInstalls',
        'author_email' => 'setAuthorEmail',
        'author_name' => 'setAuthorName',
        'secret' => 'setSecret',
        'public_app' => 'setPublicApp',
        'is_featured' => 'setIsFeatured',
        'deleted' => 'setDeleted',
        'is_user_level' => 'setIsUserLevel',
        'off_platform' => 'setOffPlatform',
        'id' => 'setId',
        'name' => 'setName',
        'icon_url' => 'setIconUrl',
        'listing_icon_url' => 'setListingIconUrl',
        'listing_wordmark_icon_url' => 'setListingWordmarkIconUrl',
        'single_color_icon_url' => 'setSingleColorIconUrl',
        'oauth_redirect_url' => 'setOauthRedirectUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'owner_id' => 'getOwnerId',
        'client_id' => 'getClientId',
        'scopes' => 'getScopes',
        'type' => 'getType',
        'version' => 'getVersion',
        'hub_id' => 'getHubId',
        'installs' => 'getInstalls',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'url_slug' => 'getUrlSlug',
        'callback_url' => 'getCallbackUrl',
        'screenshot_url' => 'getScreenshotUrl',
        'banner_url' => 'getBannerUrl',
        'install_callback_url' => 'getInstallCallbackUrl',
        'uninstall_callback_url' => 'getUninstallCallbackUrl',
        'stage' => 'getStage',
        'description' => 'getDescription',
        'short_description' => 'getShortDescription',
        'support_phone' => 'getSupportPhone',
        'support_email' => 'getSupportEmail',
        'support_url' => 'getSupportUrl',
        'help_url' => 'getHelpUrl',
        'single_color_icon_data' => 'getSingleColorIconData',
        'scope_group_ids' => 'getScopeGroupIds',
        'week_installs' => 'getWeekInstalls',
        'author_email' => 'getAuthorEmail',
        'author_name' => 'getAuthorName',
        'secret' => 'getSecret',
        'public_app' => 'getPublicApp',
        'is_featured' => 'getIsFeatured',
        'deleted' => 'getDeleted',
        'is_user_level' => 'getIsUserLevel',
        'off_platform' => 'getOffPlatform',
        'id' => 'getId',
        'name' => 'getName',
        'icon_url' => 'getIconUrl',
        'listing_icon_url' => 'getListingIconUrl',
        'listing_wordmark_icon_url' => 'getListingWordmarkIconUrl',
        'single_color_icon_url' => 'getSingleColorIconUrl',
        'oauth_redirect_url' => 'getOauthRedirectUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['hub_id'] = isset($data['hub_id']) ? $data['hub_id'] : null;
        $this->container['installs'] = isset($data['installs']) ? $data['installs'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['url_slug'] = isset($data['url_slug']) ? $data['url_slug'] : null;
        $this->container['callback_url'] = isset($data['callback_url']) ? $data['callback_url'] : null;
        $this->container['screenshot_url'] = isset($data['screenshot_url']) ? $data['screenshot_url'] : null;
        $this->container['banner_url'] = isset($data['banner_url']) ? $data['banner_url'] : null;
        $this->container['install_callback_url'] = isset($data['install_callback_url']) ? $data['install_callback_url'] : null;
        $this->container['uninstall_callback_url'] = isset($data['uninstall_callback_url']) ? $data['uninstall_callback_url'] : null;
        $this->container['stage'] = isset($data['stage']) ? $data['stage'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['support_phone'] = isset($data['support_phone']) ? $data['support_phone'] : null;
        $this->container['support_email'] = isset($data['support_email']) ? $data['support_email'] : null;
        $this->container['support_url'] = isset($data['support_url']) ? $data['support_url'] : null;
        $this->container['help_url'] = isset($data['help_url']) ? $data['help_url'] : null;
        $this->container['single_color_icon_data'] = isset($data['single_color_icon_data']) ? $data['single_color_icon_data'] : null;
        $this->container['scope_group_ids'] = isset($data['scope_group_ids']) ? $data['scope_group_ids'] : null;
        $this->container['week_installs'] = isset($data['week_installs']) ? $data['week_installs'] : null;
        $this->container['author_email'] = isset($data['author_email']) ? $data['author_email'] : null;
        $this->container['author_name'] = isset($data['author_name']) ? $data['author_name'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
        $this->container['public_app'] = isset($data['public_app']) ? $data['public_app'] : null;
        $this->container['is_featured'] = isset($data['is_featured']) ? $data['is_featured'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['is_user_level'] = isset($data['is_user_level']) ? $data['is_user_level'] : null;
        $this->container['off_platform'] = isset($data['off_platform']) ? $data['off_platform'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['icon_url'] = isset($data['icon_url']) ? $data['icon_url'] : null;
        $this->container['listing_icon_url'] = isset($data['listing_icon_url']) ? $data['listing_icon_url'] : null;
        $this->container['listing_wordmark_icon_url'] = isset($data['listing_wordmark_icon_url']) ? $data['listing_wordmark_icon_url'] : null;
        $this->container['single_color_icon_url'] = isset($data['single_color_icon_url']) ? $data['single_color_icon_url'] : null;
        $this->container['oauth_redirect_url'] = isset($data['oauth_redirect_url']) ? $data['oauth_redirect_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['guid'] === null) {
            $invalidProperties[] = "'guid' can't be null";
        }
        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['scopes'] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['updated'] === null) {
            $invalidProperties[] = "'updated' can't be null";
        }
        if ($this->container['url_slug'] === null) {
            $invalidProperties[] = "'url_slug' can't be null";
        }
        if ($this->container['callback_url'] === null) {
            $invalidProperties[] = "'callback_url' can't be null";
        }
        if ($this->container['install_callback_url'] === null) {
            $invalidProperties[] = "'install_callback_url' can't be null";
        }
        if ($this->container['uninstall_callback_url'] === null) {
            $invalidProperties[] = "'uninstall_callback_url' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['short_description'] === null) {
            $invalidProperties[] = "'short_description' can't be null";
        }
        if ($this->container['help_url'] === null) {
            $invalidProperties[] = "'help_url' can't be null";
        }
        if ($this->container['scope_group_ids'] === null) {
            $invalidProperties[] = "'scope_group_ids' can't be null";
        }
        if ($this->container['author_email'] === null) {
            $invalidProperties[] = "'author_email' can't be null";
        }
        if ($this->container['author_name'] === null) {
            $invalidProperties[] = "'author_name' can't be null";
        }
        if ($this->container['secret'] === null) {
            $invalidProperties[] = "'secret' can't be null";
        }
        if ($this->container['public_app'] === null) {
            $invalidProperties[] = "'public_app' can't be null";
        }
        if ($this->container['is_featured'] === null) {
            $invalidProperties[] = "'is_featured' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['is_user_level'] === null) {
            $invalidProperties[] = "'is_user_level' can't be null";
        }
        if ($this->container['off_platform'] === null) {
            $invalidProperties[] = "'off_platform' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string $guid guid
     *
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string $scopes scopes
     *
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets hub_id
     *
     * @return int|null
     */
    public function getHubId()
    {
        return $this->container['hub_id'];
    }

    /**
     * Sets hub_id
     *
     * @param int|null $hub_id hub_id
     *
     * @return $this
     */
    public function setHubId($hub_id)
    {
        $this->container['hub_id'] = $hub_id;

        return $this;
    }

    /**
     * Gets installs
     *
     * @return int|null
     */
    public function getInstalls()
    {
        return $this->container['installs'];
    }

    /**
     * Sets installs
     *
     * @param int|null $installs installs
     *
     * @return $this
     */
    public function setInstalls($installs)
    {
        $this->container['installs'] = $installs;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets url_slug
     *
     * @return string
     */
    public function getUrlSlug()
    {
        return $this->container['url_slug'];
    }

    /**
     * Sets url_slug
     *
     * @param string $url_slug url_slug
     *
     * @return $this
     */
    public function setUrlSlug($url_slug)
    {
        $this->container['url_slug'] = $url_slug;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string $callback_url callback_url
     *
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets screenshot_url
     *
     * @return string|null
     */
    public function getScreenshotUrl()
    {
        return $this->container['screenshot_url'];
    }

    /**
     * Sets screenshot_url
     *
     * @param string|null $screenshot_url screenshot_url
     *
     * @return $this
     */
    public function setScreenshotUrl($screenshot_url)
    {
        $this->container['screenshot_url'] = $screenshot_url;

        return $this;
    }

    /**
     * Gets banner_url
     *
     * @return string|null
     */
    public function getBannerUrl()
    {
        return $this->container['banner_url'];
    }

    /**
     * Sets banner_url
     *
     * @param string|null $banner_url banner_url
     *
     * @return $this
     */
    public function setBannerUrl($banner_url)
    {
        $this->container['banner_url'] = $banner_url;

        return $this;
    }

    /**
     * Gets install_callback_url
     *
     * @return string
     */
    public function getInstallCallbackUrl()
    {
        return $this->container['install_callback_url'];
    }

    /**
     * Sets install_callback_url
     *
     * @param string $install_callback_url install_callback_url
     *
     * @return $this
     */
    public function setInstallCallbackUrl($install_callback_url)
    {
        $this->container['install_callback_url'] = $install_callback_url;

        return $this;
    }

    /**
     * Gets uninstall_callback_url
     *
     * @return string
     */
    public function getUninstallCallbackUrl()
    {
        return $this->container['uninstall_callback_url'];
    }

    /**
     * Sets uninstall_callback_url
     *
     * @param string $uninstall_callback_url uninstall_callback_url
     *
     * @return $this
     */
    public function setUninstallCallbackUrl($uninstall_callback_url)
    {
        $this->container['uninstall_callback_url'] = $uninstall_callback_url;

        return $this;
    }

    /**
     * Gets stage
     *
     * @return string|null
     */
    public function getStage()
    {
        return $this->container['stage'];
    }

    /**
     * Sets stage
     *
     * @param string|null $stage stage
     *
     * @return $this
     */
    public function setStage($stage)
    {
        $this->container['stage'] = $stage;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description short_description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets support_phone
     *
     * @return string|null
     */
    public function getSupportPhone()
    {
        return $this->container['support_phone'];
    }

    /**
     * Sets support_phone
     *
     * @param string|null $support_phone support_phone
     *
     * @return $this
     */
    public function setSupportPhone($support_phone)
    {
        $this->container['support_phone'] = $support_phone;

        return $this;
    }

    /**
     * Gets support_email
     *
     * @return string|null
     */
    public function getSupportEmail()
    {
        return $this->container['support_email'];
    }

    /**
     * Sets support_email
     *
     * @param string|null $support_email support_email
     *
     * @return $this
     */
    public function setSupportEmail($support_email)
    {
        $this->container['support_email'] = $support_email;

        return $this;
    }

    /**
     * Gets support_url
     *
     * @return string|null
     */
    public function getSupportUrl()
    {
        return $this->container['support_url'];
    }

    /**
     * Sets support_url
     *
     * @param string|null $support_url support_url
     *
     * @return $this
     */
    public function setSupportUrl($support_url)
    {
        $this->container['support_url'] = $support_url;

        return $this;
    }

    /**
     * Gets help_url
     *
     * @return string
     */
    public function getHelpUrl()
    {
        return $this->container['help_url'];
    }

    /**
     * Sets help_url
     *
     * @param string $help_url help_url
     *
     * @return $this
     */
    public function setHelpUrl($help_url)
    {
        $this->container['help_url'] = $help_url;

        return $this;
    }

    /**
     * Gets single_color_icon_data
     *
     * @return string|null
     */
    public function getSingleColorIconData()
    {
        return $this->container['single_color_icon_data'];
    }

    /**
     * Sets single_color_icon_data
     *
     * @param string|null $single_color_icon_data single_color_icon_data
     *
     * @return $this
     */
    public function setSingleColorIconData($single_color_icon_data)
    {
        $this->container['single_color_icon_data'] = $single_color_icon_data;

        return $this;
    }

    /**
     * Gets scope_group_ids
     *
     * @return int[]
     */
    public function getScopeGroupIds()
    {
        return $this->container['scope_group_ids'];
    }

    /**
     * Sets scope_group_ids
     *
     * @param int[] $scope_group_ids scope_group_ids
     *
     * @return $this
     */
    public function setScopeGroupIds($scope_group_ids)
    {
        $this->container['scope_group_ids'] = $scope_group_ids;

        return $this;
    }

    /**
     * Gets week_installs
     *
     * @return int|null
     */
    public function getWeekInstalls()
    {
        return $this->container['week_installs'];
    }

    /**
     * Sets week_installs
     *
     * @param int|null $week_installs week_installs
     *
     * @return $this
     */
    public function setWeekInstalls($week_installs)
    {
        $this->container['week_installs'] = $week_installs;

        return $this;
    }

    /**
     * Gets author_email
     *
     * @return string
     */
    public function getAuthorEmail()
    {
        return $this->container['author_email'];
    }

    /**
     * Sets author_email
     *
     * @param string $author_email author_email
     *
     * @return $this
     */
    public function setAuthorEmail($author_email)
    {
        $this->container['author_email'] = $author_email;

        return $this;
    }

    /**
     * Gets author_name
     *
     * @return string
     */
    public function getAuthorName()
    {
        return $this->container['author_name'];
    }

    /**
     * Sets author_name
     *
     * @param string $author_name author_name
     *
     * @return $this
     */
    public function setAuthorName($author_name)
    {
        $this->container['author_name'] = $author_name;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string $secret secret
     *
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets public_app
     *
     * @return bool
     */
    public function getPublicApp()
    {
        return $this->container['public_app'];
    }

    /**
     * Sets public_app
     *
     * @param bool $public_app public_app
     *
     * @return $this
     */
    public function setPublicApp($public_app)
    {
        $this->container['public_app'] = $public_app;

        return $this;
    }

    /**
     * Gets is_featured
     *
     * @return bool
     */
    public function getIsFeatured()
    {
        return $this->container['is_featured'];
    }

    /**
     * Sets is_featured
     *
     * @param bool $is_featured is_featured
     *
     * @return $this
     */
    public function setIsFeatured($is_featured)
    {
        $this->container['is_featured'] = $is_featured;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets is_user_level
     *
     * @return bool
     */
    public function getIsUserLevel()
    {
        return $this->container['is_user_level'];
    }

    /**
     * Sets is_user_level
     *
     * @param bool $is_user_level is_user_level
     *
     * @return $this
     */
    public function setIsUserLevel($is_user_level)
    {
        $this->container['is_user_level'] = $is_user_level;

        return $this;
    }

    /**
     * Gets off_platform
     *
     * @return bool
     */
    public function getOffPlatform()
    {
        return $this->container['off_platform'];
    }

    /**
     * Sets off_platform
     *
     * @param bool $off_platform off_platform
     *
     * @return $this
     */
    public function setOffPlatform($off_platform)
    {
        $this->container['off_platform'] = $off_platform;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string|null
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string|null $icon_url icon_url
     *
     * @return $this
     */
    public function setIconUrl($icon_url)
    {
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets listing_icon_url
     *
     * @return string|null
     */
    public function getListingIconUrl()
    {
        return $this->container['listing_icon_url'];
    }

    /**
     * Sets listing_icon_url
     *
     * @param string|null $listing_icon_url listing_icon_url
     *
     * @return $this
     */
    public function setListingIconUrl($listing_icon_url)
    {
        $this->container['listing_icon_url'] = $listing_icon_url;

        return $this;
    }

    /**
     * Gets listing_wordmark_icon_url
     *
     * @return string|null
     */
    public function getListingWordmarkIconUrl()
    {
        return $this->container['listing_wordmark_icon_url'];
    }

    /**
     * Sets listing_wordmark_icon_url
     *
     * @param string|null $listing_wordmark_icon_url listing_wordmark_icon_url
     *
     * @return $this
     */
    public function setListingWordmarkIconUrl($listing_wordmark_icon_url)
    {
        $this->container['listing_wordmark_icon_url'] = $listing_wordmark_icon_url;

        return $this;
    }

    /**
     * Gets single_color_icon_url
     *
     * @return string|null
     */
    public function getSingleColorIconUrl()
    {
        return $this->container['single_color_icon_url'];
    }

    /**
     * Sets single_color_icon_url
     *
     * @param string|null $single_color_icon_url single_color_icon_url
     *
     * @return $this
     */
    public function setSingleColorIconUrl($single_color_icon_url)
    {
        $this->container['single_color_icon_url'] = $single_color_icon_url;

        return $this;
    }

    /**
     * Gets oauth_redirect_url
     *
     * @return string|null
     */
    public function getOauthRedirectUrl()
    {
        return $this->container['oauth_redirect_url'];
    }

    /**
     * Sets oauth_redirect_url
     *
     * @param string|null $oauth_redirect_url oauth_redirect_url
     *
     * @return $this
     */
    public function setOauthRedirectUrl($oauth_redirect_url)
    {
        $this->container['oauth_redirect_url'] = $oauth_redirect_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


