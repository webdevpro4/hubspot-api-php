<?php
/**
 * InternalAccessTokenInfoResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  HubSpot\Client\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OAuthService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\OAuth\Model;

use \ArrayAccess;
use \HubSpot\Client\OAuth\ObjectSerializer;

/**
 * InternalAccessTokenInfoResponse Class Doc Comment
 *
 * @category Class
 * @package  HubSpot\Client\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InternalAccessTokenInfoResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InternalAccessTokenInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'internal_scope_ids' => 'int[]',
        'internal_scopes' => 'string[]',
        'valid' => 'bool',
        'expired' => 'bool',
        'application' => '\HubSpot\Client\OAuth\Model\Application',
        'scope_group_ids' => 'int[]',
        'scope_to_scope_group_pks' => 'int[]',
        'has_signature' => 'bool',
        'has_new_signature' => 'bool',
        'expires_at' => '\DateTime',
        'granted_at_estimated' => '\DateTime',
        'token' => 'string',
        'user' => 'string',
        'hub_domain' => 'string',
        'scopes' => 'string[]',
        'hub_id' => 'int',
        'app_id' => 'int',
        'expires_in' => 'int',
        'user_id' => 'int',
        'token_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'internal_scope_ids' => null,
        'internal_scopes' => null,
        'valid' => null,
        'expired' => null,
        'application' => null,
        'scope_group_ids' => null,
        'scope_to_scope_group_pks' => null,
        'has_signature' => null,
        'has_new_signature' => null,
        'expires_at' => 'date-time',
        'granted_at_estimated' => 'date-time',
        'token' => null,
        'user' => null,
        'hub_domain' => null,
        'scopes' => null,
        'hub_id' => null,
        'app_id' => null,
        'expires_in' => null,
        'user_id' => null,
        'token_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_scope_ids' => 'internal_scope_ids',
        'internal_scopes' => 'internal_scopes',
        'valid' => 'valid',
        'expired' => 'expired',
        'application' => 'application',
        'scope_group_ids' => 'scope_group_ids',
        'scope_to_scope_group_pks' => 'scope_to_scope_group_pks',
        'has_signature' => 'has_signature',
        'has_new_signature' => 'has_new_signature',
        'expires_at' => 'expires_at',
        'granted_at_estimated' => 'granted_at_estimated',
        'token' => 'token',
        'user' => 'user',
        'hub_domain' => 'hub_domain',
        'scopes' => 'scopes',
        'hub_id' => 'hub_id',
        'app_id' => 'app_id',
        'expires_in' => 'expires_in',
        'user_id' => 'user_id',
        'token_type' => 'token_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_scope_ids' => 'setInternalScopeIds',
        'internal_scopes' => 'setInternalScopes',
        'valid' => 'setValid',
        'expired' => 'setExpired',
        'application' => 'setApplication',
        'scope_group_ids' => 'setScopeGroupIds',
        'scope_to_scope_group_pks' => 'setScopeToScopeGroupPks',
        'has_signature' => 'setHasSignature',
        'has_new_signature' => 'setHasNewSignature',
        'expires_at' => 'setExpiresAt',
        'granted_at_estimated' => 'setGrantedAtEstimated',
        'token' => 'setToken',
        'user' => 'setUser',
        'hub_domain' => 'setHubDomain',
        'scopes' => 'setScopes',
        'hub_id' => 'setHubId',
        'app_id' => 'setAppId',
        'expires_in' => 'setExpiresIn',
        'user_id' => 'setUserId',
        'token_type' => 'setTokenType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_scope_ids' => 'getInternalScopeIds',
        'internal_scopes' => 'getInternalScopes',
        'valid' => 'getValid',
        'expired' => 'getExpired',
        'application' => 'getApplication',
        'scope_group_ids' => 'getScopeGroupIds',
        'scope_to_scope_group_pks' => 'getScopeToScopeGroupPks',
        'has_signature' => 'getHasSignature',
        'has_new_signature' => 'getHasNewSignature',
        'expires_at' => 'getExpiresAt',
        'granted_at_estimated' => 'getGrantedAtEstimated',
        'token' => 'getToken',
        'user' => 'getUser',
        'hub_domain' => 'getHubDomain',
        'scopes' => 'getScopes',
        'hub_id' => 'getHubId',
        'app_id' => 'getAppId',
        'expires_in' => 'getExpiresIn',
        'user_id' => 'getUserId',
        'token_type' => 'getTokenType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_scope_ids'] = isset($data['internal_scope_ids']) ? $data['internal_scope_ids'] : null;
        $this->container['internal_scopes'] = isset($data['internal_scopes']) ? $data['internal_scopes'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['application'] = isset($data['application']) ? $data['application'] : null;
        $this->container['scope_group_ids'] = isset($data['scope_group_ids']) ? $data['scope_group_ids'] : null;
        $this->container['scope_to_scope_group_pks'] = isset($data['scope_to_scope_group_pks']) ? $data['scope_to_scope_group_pks'] : null;
        $this->container['has_signature'] = isset($data['has_signature']) ? $data['has_signature'] : null;
        $this->container['has_new_signature'] = isset($data['has_new_signature']) ? $data['has_new_signature'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['granted_at_estimated'] = isset($data['granted_at_estimated']) ? $data['granted_at_estimated'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['hub_domain'] = isset($data['hub_domain']) ? $data['hub_domain'] : null;
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
        $this->container['hub_id'] = isset($data['hub_id']) ? $data['hub_id'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['expires_in'] = isset($data['expires_in']) ? $data['expires_in'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['token_type'] = isset($data['token_type']) ? $data['token_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['internal_scope_ids'] === null) {
            $invalidProperties[] = "'internal_scope_ids' can't be null";
        }
        if ($this->container['internal_scopes'] === null) {
            $invalidProperties[] = "'internal_scopes' can't be null";
        }
        if ($this->container['valid'] === null) {
            $invalidProperties[] = "'valid' can't be null";
        }
        if ($this->container['expired'] === null) {
            $invalidProperties[] = "'expired' can't be null";
        }
        if ($this->container['scope_group_ids'] === null) {
            $invalidProperties[] = "'scope_group_ids' can't be null";
        }
        if ($this->container['scope_to_scope_group_pks'] === null) {
            $invalidProperties[] = "'scope_to_scope_group_pks' can't be null";
        }
        if ($this->container['has_signature'] === null) {
            $invalidProperties[] = "'has_signature' can't be null";
        }
        if ($this->container['has_new_signature'] === null) {
            $invalidProperties[] = "'has_new_signature' can't be null";
        }
        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        if ($this->container['granted_at_estimated'] === null) {
            $invalidProperties[] = "'granted_at_estimated' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['scopes'] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if ($this->container['hub_id'] === null) {
            $invalidProperties[] = "'hub_id' can't be null";
        }
        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['expires_in'] === null) {
            $invalidProperties[] = "'expires_in' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['token_type'] === null) {
            $invalidProperties[] = "'token_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_scope_ids
     *
     * @return int[]
     */
    public function getInternalScopeIds()
    {
        return $this->container['internal_scope_ids'];
    }

    /**
     * Sets internal_scope_ids
     *
     * @param int[] $internal_scope_ids internal_scope_ids
     *
     * @return $this
     */
    public function setInternalScopeIds($internal_scope_ids)
    {
        $this->container['internal_scope_ids'] = $internal_scope_ids;

        return $this;
    }

    /**
     * Gets internal_scopes
     *
     * @return string[]
     */
    public function getInternalScopes()
    {
        return $this->container['internal_scopes'];
    }

    /**
     * Sets internal_scopes
     *
     * @param string[] $internal_scopes internal_scopes
     *
     * @return $this
     */
    public function setInternalScopes($internal_scopes)
    {
        $this->container['internal_scopes'] = $internal_scopes;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid valid
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool $expired expired
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \HubSpot\Client\OAuth\Model\Application|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \HubSpot\Client\OAuth\Model\Application|null $application application
     *
     * @return $this
     */
    public function setApplication($application)
    {
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets scope_group_ids
     *
     * @return int[]
     */
    public function getScopeGroupIds()
    {
        return $this->container['scope_group_ids'];
    }

    /**
     * Sets scope_group_ids
     *
     * @param int[] $scope_group_ids scope_group_ids
     *
     * @return $this
     */
    public function setScopeGroupIds($scope_group_ids)
    {
        $this->container['scope_group_ids'] = $scope_group_ids;

        return $this;
    }

    /**
     * Gets scope_to_scope_group_pks
     *
     * @return int[]
     */
    public function getScopeToScopeGroupPks()
    {
        return $this->container['scope_to_scope_group_pks'];
    }

    /**
     * Sets scope_to_scope_group_pks
     *
     * @param int[] $scope_to_scope_group_pks scope_to_scope_group_pks
     *
     * @return $this
     */
    public function setScopeToScopeGroupPks($scope_to_scope_group_pks)
    {
        $this->container['scope_to_scope_group_pks'] = $scope_to_scope_group_pks;

        return $this;
    }

    /**
     * Gets has_signature
     *
     * @return bool
     */
    public function getHasSignature()
    {
        return $this->container['has_signature'];
    }

    /**
     * Sets has_signature
     *
     * @param bool $has_signature has_signature
     *
     * @return $this
     */
    public function setHasSignature($has_signature)
    {
        $this->container['has_signature'] = $has_signature;

        return $this;
    }

    /**
     * Gets has_new_signature
     *
     * @return bool
     */
    public function getHasNewSignature()
    {
        return $this->container['has_new_signature'];
    }

    /**
     * Sets has_new_signature
     *
     * @param bool $has_new_signature has_new_signature
     *
     * @return $this
     */
    public function setHasNewSignature($has_new_signature)
    {
        $this->container['has_new_signature'] = $has_new_signature;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at expires_at
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets granted_at_estimated
     *
     * @return \DateTime
     */
    public function getGrantedAtEstimated()
    {
        return $this->container['granted_at_estimated'];
    }

    /**
     * Sets granted_at_estimated
     *
     * @param \DateTime $granted_at_estimated granted_at_estimated
     *
     * @return $this
     */
    public function setGrantedAtEstimated($granted_at_estimated)
    {
        $this->container['granted_at_estimated'] = $granted_at_estimated;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets hub_domain
     *
     * @return string|null
     */
    public function getHubDomain()
    {
        return $this->container['hub_domain'];
    }

    /**
     * Sets hub_domain
     *
     * @param string|null $hub_domain hub_domain
     *
     * @return $this
     */
    public function setHubDomain($hub_domain)
    {
        $this->container['hub_domain'] = $hub_domain;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[] $scopes scopes
     *
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets hub_id
     *
     * @return int
     */
    public function getHubId()
    {
        return $this->container['hub_id'];
    }

    /**
     * Sets hub_id
     *
     * @param int $hub_id hub_id
     *
     * @return $this
     */
    public function setHubId($hub_id)
    {
        $this->container['hub_id'] = $hub_id;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param int $app_id app_id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets expires_in
     *
     * @return int
     */
    public function getExpiresIn()
    {
        return $this->container['expires_in'];
    }

    /**
     * Sets expires_in
     *
     * @param int $expires_in expires_in
     *
     * @return $this
     */
    public function setExpiresIn($expires_in)
    {
        $this->container['expires_in'] = $expires_in;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets token_type
     *
     * @return string
     */
    public function getTokenType()
    {
        return $this->container['token_type'];
    }

    /**
     * Sets token_type
     *
     * @param string $token_type token_type
     *
     * @return $this
     */
    public function setTokenType($token_type)
    {
        $this->container['token_type'] = $token_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


