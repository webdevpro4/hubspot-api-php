<?php
/**
 * ScopeGroupWhitelist
 *
 * PHP version 5
 *
 * @category Class
 * @package  HubSpot\Client\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OAuthService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\OAuth\Model;

use \ArrayAccess;
use \HubSpot\Client\OAuth\ObjectSerializer;

/**
 * ScopeGroupWhitelist Class Doc Comment
 *
 * @category Class
 * @package  HubSpot\Client\OAuth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ScopeGroupWhitelist implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScopeGroupWhitelist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scope_group_id' => 'int',
        'whitelisted' => 'bool',
        'app_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'scope_group_id' => null,
        'whitelisted' => null,
        'app_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scope_group_id' => 'scopeGroupId',
        'whitelisted' => 'whitelisted',
        'app_ids' => 'appIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scope_group_id' => 'setScopeGroupId',
        'whitelisted' => 'setWhitelisted',
        'app_ids' => 'setAppIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scope_group_id' => 'getScopeGroupId',
        'whitelisted' => 'getWhitelisted',
        'app_ids' => 'getAppIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scope_group_id'] = isset($data['scope_group_id']) ? $data['scope_group_id'] : null;
        $this->container['whitelisted'] = isset($data['whitelisted']) ? $data['whitelisted'] : null;
        $this->container['app_ids'] = isset($data['app_ids']) ? $data['app_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scope_group_id'] === null) {
            $invalidProperties[] = "'scope_group_id' can't be null";
        }
        if ($this->container['whitelisted'] === null) {
            $invalidProperties[] = "'whitelisted' can't be null";
        }
        if ($this->container['app_ids'] === null) {
            $invalidProperties[] = "'app_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scope_group_id
     *
     * @return int
     */
    public function getScopeGroupId()
    {
        return $this->container['scope_group_id'];
    }

    /**
     * Sets scope_group_id
     *
     * @param int $scope_group_id scope_group_id
     *
     * @return $this
     */
    public function setScopeGroupId($scope_group_id)
    {
        $this->container['scope_group_id'] = $scope_group_id;

        return $this;
    }

    /**
     * Gets whitelisted
     *
     * @return bool
     */
    public function getWhitelisted()
    {
        return $this->container['whitelisted'];
    }

    /**
     * Sets whitelisted
     *
     * @param bool $whitelisted whitelisted
     *
     * @return $this
     */
    public function setWhitelisted($whitelisted)
    {
        $this->container['whitelisted'] = $whitelisted;

        return $this;
    }

    /**
     * Gets app_ids
     *
     * @return int[]
     */
    public function getAppIds()
    {
        return $this->container['app_ids'];
    }

    /**
     * Sets app_ids
     *
     * @param int[] $app_ids app_ids
     *
     * @return $this
     */
    public function setAppIds($app_ids)
    {
        $this->container['app_ids'] = $app_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


