<?php
/**
 * AssociationDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  HubSpot\Client\Crm\Schemas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Schemas
 *
 * The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object's type, properties, and associations. The schema can be uniquely identified by its **object type ID**.
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\Crm\Schemas\Model;

use \ArrayAccess;
use \HubSpot\Client\Crm\Schemas\ObjectSerializer;

/**
 * AssociationDefinition Class Doc Comment
 *
 * @category Class
 * @description Defines an association between two object types.
 * @package  HubSpot\Client\Crm\Schemas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssociationDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AssociationDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from_object_type_id' => 'string',
        'to_object_type_id' => 'string',
        'name' => 'string',
        'cardinality' => 'string',
        'inverse_cardinality' => 'string',
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'from_object_type_id' => null,
        'to_object_type_id' => null,
        'name' => null,
        'cardinality' => null,
        'inverse_cardinality' => null,
        'id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_object_type_id' => 'fromObjectTypeId',
        'to_object_type_id' => 'toObjectTypeId',
        'name' => 'name',
        'cardinality' => 'cardinality',
        'inverse_cardinality' => 'inverseCardinality',
        'id' => 'id',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_object_type_id' => 'setFromObjectTypeId',
        'to_object_type_id' => 'setToObjectTypeId',
        'name' => 'setName',
        'cardinality' => 'setCardinality',
        'inverse_cardinality' => 'setInverseCardinality',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_object_type_id' => 'getFromObjectTypeId',
        'to_object_type_id' => 'getToObjectTypeId',
        'name' => 'getName',
        'cardinality' => 'getCardinality',
        'inverse_cardinality' => 'getInverseCardinality',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CARDINALITY_ONE = 'ONE_TO_ONE';
    const CARDINALITY_MANY = 'ONE_TO_MANY';
    const INVERSE_CARDINALITY_ONE = 'ONE_TO_ONE';
    const INVERSE_CARDINALITY_MANY = 'ONE_TO_MANY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardinalityAllowableValues()
    {
        return [
            self::CARDINALITY_ONE,
            self::CARDINALITY_MANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInverseCardinalityAllowableValues()
    {
        return [
            self::INVERSE_CARDINALITY_ONE,
            self::INVERSE_CARDINALITY_MANY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_object_type_id'] = isset($data['from_object_type_id']) ? $data['from_object_type_id'] : null;
        $this->container['to_object_type_id'] = isset($data['to_object_type_id']) ? $data['to_object_type_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['cardinality'] = isset($data['cardinality']) ? $data['cardinality'] : null;
        $this->container['inverse_cardinality'] = isset($data['inverse_cardinality']) ? $data['inverse_cardinality'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['from_object_type_id'] === null) {
            $invalidProperties[] = "'from_object_type_id' can't be null";
        }
        if ($this->container['to_object_type_id'] === null) {
            $invalidProperties[] = "'to_object_type_id' can't be null";
        }
        if ($this->container['cardinality'] === null) {
            $invalidProperties[] = "'cardinality' can't be null";
        }
        $allowedValues = $this->getCardinalityAllowableValues();
        if (!is_null($this->container['cardinality']) && !in_array($this->container['cardinality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cardinality', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['inverse_cardinality'] === null) {
            $invalidProperties[] = "'inverse_cardinality' can't be null";
        }
        $allowedValues = $this->getInverseCardinalityAllowableValues();
        if (!is_null($this->container['inverse_cardinality']) && !in_array($this->container['inverse_cardinality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'inverse_cardinality', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_object_type_id
     *
     * @return string
     */
    public function getFromObjectTypeId()
    {
        return $this->container['from_object_type_id'];
    }

    /**
     * Sets from_object_type_id
     *
     * @param string $from_object_type_id ID of the primary object type to link from.
     *
     * @return $this
     */
    public function setFromObjectTypeId($from_object_type_id)
    {
        $this->container['from_object_type_id'] = $from_object_type_id;

        return $this;
    }

    /**
     * Gets to_object_type_id
     *
     * @return string
     */
    public function getToObjectTypeId()
    {
        return $this->container['to_object_type_id'];
    }

    /**
     * Sets to_object_type_id
     *
     * @param string $to_object_type_id ID of the target object type ID to link to.
     *
     * @return $this
     */
    public function setToObjectTypeId($to_object_type_id)
    {
        $this->container['to_object_type_id'] = $to_object_type_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A unique name for this association.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cardinality
     *
     * @return string
     */
    public function getCardinality()
    {
        return $this->container['cardinality'];
    }

    /**
     * Sets cardinality
     *
     * @param string $cardinality cardinality
     *
     * @return $this
     */
    public function setCardinality($cardinality)
    {
        $allowedValues = $this->getCardinalityAllowableValues();
        if (!in_array($cardinality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cardinality', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cardinality'] = $cardinality;

        return $this;
    }

    /**
     * Gets inverse_cardinality
     *
     * @return string
     */
    public function getInverseCardinality()
    {
        return $this->container['inverse_cardinality'];
    }

    /**
     * Sets inverse_cardinality
     *
     * @param string $inverse_cardinality inverse_cardinality
     *
     * @return $this
     */
    public function setInverseCardinality($inverse_cardinality)
    {
        $allowedValues = $this->getInverseCardinalityAllowableValues();
        if (!in_array($inverse_cardinality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inverse_cardinality', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inverse_cardinality'] = $inverse_cardinality;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique ID for this association.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at When the association was defined.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at When the association was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


