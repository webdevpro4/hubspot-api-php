<?php
/**
 * PropertyMutability
 *
 * PHP version 5
 *
 * @category Class
 * @package  HubSpot\Client\Crm\Properties
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Properties
 *
 * All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HubSpot\Client\Crm\Properties\Model;

use \ArrayAccess;
use \HubSpot\Client\Crm\Properties\ObjectSerializer;

/**
 * PropertyMutability Class Doc Comment
 *
 * @category Class
 * @description An object containing information about how the property can be modified.
 * @package  HubSpot\Client\Crm\Properties
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PropertyMutability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PropertyMutability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'read_only_value' => 'bool',
        'read_only_definition' => 'bool',
        'archivable' => 'bool',
        'mutable_options' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'read_only_value' => null,
        'read_only_definition' => null,
        'archivable' => null,
        'mutable_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'read_only_value' => 'readOnlyValue',
        'read_only_definition' => 'readOnlyDefinition',
        'archivable' => 'archivable',
        'mutable_options' => 'mutableOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'read_only_value' => 'setReadOnlyValue',
        'read_only_definition' => 'setReadOnlyDefinition',
        'archivable' => 'setArchivable',
        'mutable_options' => 'setMutableOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'read_only_value' => 'getReadOnlyValue',
        'read_only_definition' => 'getReadOnlyDefinition',
        'archivable' => 'getArchivable',
        'mutable_options' => 'getMutableOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['read_only_value'] = isset($data['read_only_value']) ? $data['read_only_value'] : null;
        $this->container['read_only_definition'] = isset($data['read_only_definition']) ? $data['read_only_definition'] : null;
        $this->container['archivable'] = isset($data['archivable']) ? $data['archivable'] : null;
        $this->container['mutable_options'] = isset($data['mutable_options']) ? $data['mutable_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['read_only_value'] === null) {
            $invalidProperties[] = "'read_only_value' can't be null";
        }
        if ($this->container['read_only_definition'] === null) {
            $invalidProperties[] = "'read_only_definition' can't be null";
        }
        if ($this->container['archivable'] === null) {
            $invalidProperties[] = "'archivable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets read_only_value
     *
     * @return bool
     */
    public function getReadOnlyValue()
    {
        return $this->container['read_only_value'];
    }

    /**
     * Sets read_only_value
     *
     * @param bool $read_only_value Whether or not the property's value is read-only.
     *
     * @return $this
     */
    public function setReadOnlyValue($read_only_value)
    {
        $this->container['read_only_value'] = $read_only_value;

        return $this;
    }

    /**
     * Gets read_only_definition
     *
     * @return bool
     */
    public function getReadOnlyDefinition()
    {
        return $this->container['read_only_definition'];
    }

    /**
     * Sets read_only_definition
     *
     * @param bool $read_only_definition Whether or not the property's definition is read-only.
     *
     * @return $this
     */
    public function setReadOnlyDefinition($read_only_definition)
    {
        $this->container['read_only_definition'] = $read_only_definition;

        return $this;
    }

    /**
     * Gets archivable
     *
     * @return bool
     */
    public function getArchivable()
    {
        return $this->container['archivable'];
    }

    /**
     * Sets archivable
     *
     * @param bool $archivable Whether or not the property can be archived.
     *
     * @return $this
     */
    public function setArchivable($archivable)
    {
        $this->container['archivable'] = $archivable;

        return $this;
    }

    /**
     * Gets mutable_options
     *
     * @return bool|null
     */
    public function getMutableOptions()
    {
        return $this->container['mutable_options'];
    }

    /**
     * Sets mutable_options
     *
     * @param bool|null $mutable_options Whether or not the property's options can be modified.
     *
     * @return $this
     */
    public function setMutableOptions($mutable_options)
    {
        $this->container['mutable_options'] = $mutable_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


